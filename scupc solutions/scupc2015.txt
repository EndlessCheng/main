比赛地址：
http://cstest.scu.edu.cn/soj/contest/contest.action?cid=355

非官方题解或提示：

A	Equation
解题报告在
https://projecteuler.net/problem=495
讨论区里

B	Necklace
题目由
https://projecteuler.net/problem=281
改编而来，方法是直接使用Burnside定理。

在求解过程中要快速求#{gcd(i, n) = m and 1 <= i <= n}，其中m = n / d, d | n。
显然满足条件的i的形式是k m，其中k = 1...d。
考虑n的素因子p，其中p的次数是c，那么当m中不含p的时候，k中不含p。当m中p的次
数小于c的时候k中也不含p。于是只要求出1到d不被一系列素数整除的数即可。我是直
接用容斥原理做的。但是从比赛提交的代码来看：注意到d*m=n，从讨论可以知道k中
不能含有的素因子正好是d的素因子，所求的正好是不超过d且和d互素的数的个数。
这样，直接求d的欧拉函数值即可，也就是当p|d时，令d = d / p * (p - 1)。所以
题目难度比预期中的低。

C	Permutations
题目的表达式非常简单,在n>0时：
n + n*(n-1) + n*(n-1)*(n-2) ... n!
= n!/(n-1)! + n!/(n-2)! + n!/(n-3)!... n!/0!
= n!(1/(n-1)!+1/(n-2)!+1/(n-3)! ... 1/0!)
所以如果对阶乘的逆的部分和、n!打表，就能快速计算。
首先对n!打表，然后利用快速幂求出1/n!，然后从大到小求出1/(n-1)!，1/(n-2)!，
最后作部分和。题目的数据范围和时间限制会卡掉从1到n分别利用快速幂求逆的代码。
这里要求模数是素数。

题目原意是考察上述技巧，但是没有注意到题目还有个简单的递推：f[n] = (f[n-1] + 1) * n。
所以导致题目有很多队过，变成了签到题。此外在该数据范围内，模数不是素数也能求解。

D	KNN
解法1：构造kd树，维护一个最小堆结构遍历这个树，利用已有结果进行枝剪。最坏复杂度可能
达到O(n)。
解法2：所有的点根据x坐标的整数部分放到若干个桶内，桶内元素按y排序。随机选k个不同
的点初始化最小堆。接着在目标点的x坐标的整数部分所在的桶内查找：利用二分求出桶内离目标
点最近的点，然后更新最小堆。紧接着相邻的桶内查找。注意利用桶内的最差元素枝剪。另外
还要注意坐标的小数部分对枝剪的影响。这样的做法用STL中的最小堆结构无法通过，需要手写
（直接用数组维护一个有序结构即可）。同样的，这样的做法复杂度可能达到O(n)。

E	Counting_3
dp。
首先求出目标的3进制表示。用dp[i][0]表示只考虑第0到i位上对应的数，第i位为0的解数。
用dp[i][1]表示第i位为非0的解数。在状态转移过程中，根据第i位的值进行讨论。显然，转移
方法要么是直接在第i位添加对应的数，或者在第i位添加对应的数后从第i位取出一个1来，
然后把这个1写成3,23,223,2223...的形式(三进制)的形式放在低位上。这样，枚举3在的位置即可。
需要仔细思考的是，在什么时候枚举结束。

F	Miss Zhao's Graph
只要想到对边排序后面的就能过了。

G	bilibili_numbers
用线段树维护区间最大最小值，离线跑3次。
复杂度由there is up to 40 bilibili numbers at any time保证。

H	frog's dice
二分图最大匹配。
直接用匹配的解法可能出现图中有很多边的情况。如果利用网络流，在中间添加点表示26个字母，
可以解决很多边的问题，但是本题不考察这样的技巧。
另外还有一些其它YY的办法可以过。

I	lovd_kd's_room
矩阵二分。
dp[i][x]表示考虑前i行，其中第i行的状态是x的方法数。第i行第j列被覆盖，当且仅当x中第j位为1。
然后考虑所有铺满第i行的方法，得到dp[i+1][0...15]。用m[y][x]表示第i行的状态是x在填满第i行后
第j行的状态是y的方法数。m矩阵可以通过dfs得到。最后利用矩阵二分解决，其中初始状态是
dp[1][0] = 1其它为0。答案是dp[n+1][0]。

J	misaka_and_misaki
这个目前不会。
